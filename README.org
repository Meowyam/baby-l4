#+TITLE: Core Abstract Syntax

* Overview

Abstract syntax for core L4 concepts. 

*Files:*

- =Syntax.hs= Declaration of data types (types, classes and instances,
  modules, expressions, timed automata)
- =Exec.hs= Execution / evaluation of expresssions
- =TaToUppaal.hs= Conversion of Timed Automata to the Uppaal XTA format, see
  https://www.it.uu.se/research/group/darts/uppaal/help.php?file=System_Descriptions/Introduction.shtml 
- =TransL.hs= Translation from L4 BNFC to the core abstract syntax. Very incomplete.
- =Typing.hs= Type checking of abstract syntax.

The file =Test.hs= is for testing only and can be discarded.

* Versions

** 0.3.2

- with lexicon :: =Business -> business_2=
- wordnet annotations in classes :: e.g. =class Business (132) {=
- classes :: e.g. =class Business...=

** 0.3.4

future version! will have support for More Things!

- wordnet annotations deleted from classes :: =class Business {=

* Toolchain Versions

| l4 syntax | file    | parser status | nlg status                            | ide status             | reasoner status |
|-----------+---------+---------------+---------------------------------------+------------------------+-----------------|
|     0.3.2 | mini.l4 | ok            | ok                                    | syntax highlighting ok |                 |
|     0.3.2 | cr.l4   | ok            | errors on typ2kind: not yet supported |                        |                 |

We should have a test suite that creates this dashboard. See issue #4.

#+begin_example
l4: typ2kind: not yet supported: FunT (ClassT (ClsNm "LegalPractitioner")) (FunT (ClassT (ClsNm "Appointment")) BoolT)
CallStack (from HasCallStack):
  error, called at src/ToGF.hs:43:8 in baby-l4-0.1.0.0-7MSFL28Gv2uEWQACncPSnj:ToGF
#+end_example

* Uppaal

** Interactive use with the GUI

Start Uppaal with =java -jar uppaal.jar &=, then =File / Open system=. Load a
model (=*xml=) file. The view typically opens on the Editor tab (system
definition with several automata). On the Simulator tab, one can execute the
system by stepping through a scenario. On the Verifier tab, one finds several
"queries" (corresponding to proof obligations). These are contained in the
=*q= file associated with the model file. Select one of the formulas and
verify it by clicking on the Check button. In order to obtain a
counter-example, select "Options / Diagnostic Trace" and then one of Some /
Shortest / Fastest. On the next Check, the counterexample will be loaded into
the Simulator.


** Command line interface

In Haskell, running =writeFile "test_haskell_uppaal.xta" (ta_sys_to_uppaal (TmdAutSys [autA, autB]))=
produces a textual Uppaal XTA file. The file can in principle be read in by
the GUI. As there is no graphical layout information information associated
with the file, the elements of the automata are first arranged in an arbitrary
fashion. After manually rearranging and storing the model, a =.ugi= file
stores graphic information. 

The XTA file can be run (together with a query in a =.q= file) with shell
command =verifyta= contained in the download bundle, as in =bin-Linux/verifyta -t0 
test_haskell_uppaal.xta test_haskell_uppaal.q=, where =test_haskell_uppaal.q=
is, for example:

#+BEGIN_SRC
E<> AutA.l3 and AutB.l2
#+END_SRC

A textual trace is then written to standard output.


* Installation and Prequisites

The goal is for this to work:

#+begin_example
$ stack run l4 l4/mini.l4
#+end_example

and you should get this output:

#+begin_example

#+end_example

If you get an error involving =Syntax.gf=, then you need to get your =RGL= and =WordNet= installed correctly. To get =RGL= installed, you need =gf=.

Where is gf? From inside the =baby-l4= directory (which is where you should already be, if you are reading this):

#+begin_example
┌─[mengwong@venice4] - [~/src/smucclaw/baby-l4] - [2021-02-26 14:38:35]
└─[0] <git:(main 020265a✈) > stack exec which gf
/Users/mengwong/.stack/snapshots/x86_64-osx/0d89070f643fd180a58cfc42b9ba6fbece00cfd59cde65a81136970789de7eb9/8.8.4/bin/gf
#+end_example

Why? Baby-l4's =stack build= installs a working =gf= as a dependency, so we will use that instead of installing =gf-core= from source.

Copy that path.

** Set up GF_LIB_PATH

In your =~/.zshenv= or in your =~/.profile=, depending on whether you belong to the zsh or bash persuasion, create a line

#+begin_example
export GF_LIB_PATH=$HOME/gf_lib_path
#+end_example

For that environment variable to take effect, you can restart your shell or just paste it at your shell prompt. Now you should see:

#+begin_example
┌─[mengwong@venice4] - [~/src/smucclaw/baby-l4] - [2021-02-26 14:38:36]
└─[0] <git:(main 020265a✈) > echo $GF_LIB_PATH
/Users/mengwong/gf_lib_path
#+end_example

This is where gf will install the RGL, and where baby-l4's codebase will look for it.

You need to create it.

#+begin_example
┌─[mengwong@venice4] - [~/src/smucclaw/baby-l4] - [2021-02-26 14:43:34]
└─[1] <git:(main 020265a✈) > mkdir $GF_LIB_PATH
#+end_example

TODO: raise a PR against gf-rgl to =mkdir -p $GF_LIB_PATH= if it doesn't already exist. Note that this mkdir PR will be complicated the fact that a GF_LIB_PATH may be a colon-separated list.

Now we are ready to install to it.

** Clone gf-rgl

#+begin_example
mkdir ~/src
cd ~/src
git clone https://github.com/GrammaticalFramework/gf-rgl
cd gf-rgl
#+end_example

You should now be in a directory called =~/src/gf-rgl=

Run (substituting your actual gf path for the =--gf== argument below):

#+begin_example
┌─[mengwong@venice4] - [~/src/gf-rgl] - [2021-02-26 14:33:25]
└─[0] <git:(master 24bc8462) > ./Setup.sh --gf=/Users/mengwong/.stack/snapshots/x86_64-osx/0d89070f643fd180a58cfc42b9ba6fbece00cfd59cde65a81136970789de7eb9/8.8.4/bin/gf
Building [prelude]
Building [present]
Building [alltenses]
Copying to /Users/mengwong/gf_lib_path
#+end_example

** Now install gf-wordnet

First, clone gf-wordnet:

#+begin_example
cd ~/src
git clone https://github.com/GrammaticalFramework/gf-wordnet
#+end_example

Then run gf on some of the WordNet*.gf files, installing the compiled gfo files to GF_LIB_PATH.

#+begin_example
┌─[mengwong@venice4] - [~/src/gf-wordnet] - [2021-02-26 14:47:04]
└─[127] <git:(master 6a717246) > `cd ~/src/smucclaw/baby-l4; stack exec which gf` --gfo-dir=$GF_LIB_PATH WordNetEng.gf WordNetSwe.gf WordNetPor.gf
#+end_example
